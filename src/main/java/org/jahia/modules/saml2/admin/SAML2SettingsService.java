package org.jahia.modules.saml2.admin;

import org.apache.commons.lang.StringUtils;
import org.jahia.data.templates.JahiaTemplatesPackage;
import org.jahia.modules.saml2.SAML2Constants;
import org.jahia.modules.saml2.SAML2Util;
import org.jahia.services.templates.JahiaModuleAware;
import org.jahia.settings.SettingsBean;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.service.cm.Configuration;
import org.osgi.service.cm.ConfigurationAdmin;
import org.springframework.core.io.Resource;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public final class SAML2SettingsService implements JahiaModuleAware {

    private static final SAML2SettingsService INSTANCE = new SAML2SettingsService();
    private Map<String, SAML2Settings> settingsBySiteKeyMap = new HashMap<>();
    private String resourceBundleName;
    private JahiaTemplatesPackage module;
    private Set<String> supportedLocales = Collections.emptySet();
    private SAML2Util util;
    private ConfigurationAdmin configurationAdmin;

    private SAML2SettingsService() {
        super();
    }

    public static SAML2SettingsService getInstance() {
        return INSTANCE;
    }

    public void registerServerSettings(SAML2Settings settings) {
        settingsBySiteKeyMap.put(settings.getSiteKey(), settings);
    }

    public SAML2Settings createSAML2Settings(final String siteKey) throws IOException {
        SAML2Settings settings = new SAML2Settings();
        settings.setSiteKey(siteKey);
        settings.setSaml2SettingsService(this);
        return settings;
    }

    public void saveSAML2Settings(SAML2Settings settings) throws IOException {
        util.validateSettings(settings);

        // refresh and save settings
        Configuration configuration = findConfiguration(settings.getSiteKey());

        if (configuration.getProperties() == null) {
            @SuppressWarnings("java:S1149") Dictionary<String, Object> properties = new Hashtable<>();
            String file = SettingsBean.getInstance().getJahiaVarDiskPath() + "/karaf/etc/org.jahia.modules.saml2-" + settings.getSiteKey() + ".cfg";
            properties.put("felix.fileinstall.filename", "file:" + file);

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
                bw.write("# SAML Configuration file - autogenerated");
                bw.newLine();
                setProperties(settings, properties, bw);
                configuration.update(properties);
            }
        } else {
            Dictionary<String, Object> properties = configuration.getProperties();
            setProperties(settings, properties, null);
            configuration.update(properties);
        }
    }

    private void setProperties(SAML2Settings settings, Dictionary<String, Object> properties, BufferedWriter writer) throws IOException {
        setProperty(properties, writer, SAML2Constants.SITEKEY, settings.getSiteKey());
        setProperty(properties, writer, SAML2Constants.ENABLED, Boolean.toString(settings.getEnabled()));
        setProperty(properties, writer, SAML2Constants.IDENTITY_PROVIDER_METADATA, settings.getIdentityProviderMetadata());
        setProperty(properties, writer, SAML2Constants.RELYING_PARTY_IDENTIFIER, settings.getRelyingPartyIdentifier());
        setProperty(properties, writer, SAML2Constants.KEY_STORE, settings.getKeyStore());
        setProperty(properties, writer, SAML2Constants.KEY_STORE_TYPE, settings.getKeyStoreType());
        setProperty(properties, writer, SAML2Constants.KEY_STORE_ALIAS, settings.getKeyStoreAlias());
        setProperty(properties, writer, SAML2Constants.KEY_STORE_PASS, settings.getKeyStorePass());
        setProperty(properties, writer, SAML2Constants.PRIVATE_KEY_PASS, settings.getPrivateKeyPass());
        setProperty(properties, writer, SAML2Constants.INCOMING_TARGET_URL, settings.getIncomingTargetUrl());
        setProperty(properties, writer, SAML2Constants.POST_LOGIN_PATH, settings.getPostLoginPath());
        setProperty(properties, writer, SAML2Constants.MAXIMUM_AUTHENTICATION_LIFETIME, Long.toString(settings.getMaximumAuthenticationLifetime()));
        setProperty(properties, writer, SAML2Constants.FORCE_AUTH, Boolean.toString(settings.isForceAuth()));
        setProperty(properties, writer, SAML2Constants.PASSIVE, Boolean.toString(settings.isPassive()));
        setProperty(properties, writer, SAML2Constants.REQUIRES_SIGNED_ASSERTIONS, Boolean.toString(settings.isRequireSignedAssertions()));
        setProperty(properties, writer, SAML2Constants.SIGN_AUTH_REQUEST, Boolean.toString(settings.isSignAuthnRequest()));
        setProperty(properties, writer, SAML2Constants.BINDING_TYPE, settings.getBindingType());
        setProperty(properties, writer, SAML2Constants.MAPPER_NAME, settings.getMapperName());
        setProperty(properties, writer, SAML2Constants.MAPPER_ID_FIELD, settings.getMapperIdField());
    }

    private void setProperty(Dictionary<String, Object> properties, BufferedWriter writer, String key, String value) throws IOException {
        if (value != null) {
            properties.put(key, value);
            if (writer != null) {
                writer.write(key + " = " + value);
                writer.newLine();
            }
        }
    }


    private Configuration findConfiguration(String siteKey) throws IOException {
        try {
            Configuration[] configurations = configurationAdmin.listConfigurations("(service.factoryPid=org.jahia.modules.saml2)");
            for (Configuration configuration : configurations) {
                if (siteKey.equals(configuration.getProperties().get(SAML2Constants.SITEKEY))) {
                    return configuration;
                }
            }
        } catch (InvalidSyntaxException e) {
            // not possible
        }
        Configuration configuration = configurationAdmin.createFactoryConfiguration("org.jahia.modules.saml2");

        return configuration;
    }

    public void removeServerSettings(String siteKey) {
        if (settingsBySiteKeyMap.containsKey(siteKey)) {
            settingsBySiteKeyMap.remove(siteKey);
            util.resetClient(siteKey);
        }
    }

    public Map<String, SAML2Settings> getSettingsBySiteKeyMap() {
        return settingsBySiteKeyMap;
    }

    public SAML2Settings getSettings(final String siteKey) {
        return settingsBySiteKeyMap.get(siteKey);
    }

    @Override
    public void setJahiaModule(final JahiaTemplatesPackage jahiaTemplatesPackage) {
        this.module = jahiaTemplatesPackage;

        final Resource[] resources;
        final String rbName = module.getResourceBundleName();
        if (rbName != null) {
            resourceBundleName = StringUtils.substringAfterLast(rbName, ".") + "-i18n";
            resources = module.getResources("javascript/i18n");
            supportedLocales = new HashSet<>();
            for (final Resource resource : resources) {
                final String fileName = resource.getFilename();
                if (fileName.startsWith(resourceBundleName)) {
                    final String l = StringUtils.substringBetween(fileName, resourceBundleName, ".js");
                    supportedLocales.add(l.length() > 0 ? StringUtils.substringAfter(l, "_") : StringUtils.EMPTY);
                }
            }
        }
    }

    public Set<String> getSupportedLocales() {
        return Collections.unmodifiableSet(supportedLocales);
    }

    public String getResourceBundleName() {
        return resourceBundleName;
    }

    public void setConfigurationAdmin(ConfigurationAdmin configurationAdmin) {
        this.configurationAdmin = configurationAdmin;
    }

    public void setUtil(SAML2Util util) {
        this.util = util;
    }
}
